#Temel Türler & Null Güvenliği#
1-val ile var arasındaki fark nedir?
---val (value)→ read-only'dir
Get edilebilir fakat set edilemez
---var (variable)→ mutable'dir
Get ve set işlemi yapılabilmektedir.
*******************************************************************
2-Bir var değişkeni val gibi davranmasını nasıl sağlayabiliriz val kelimesini kullanmadan? 
Bunu neden yapmak isteriz? Örnek bir senaryo verin.
---Var değişkenin getter ve setter fonksiyonları vardır.Set özelliğini private yaparsak val gini davranmasını sağlarız.
	var name="oğuz"
	   private set
değişkenimizi farklı bir class içinde kullanacaksak ve değişmesini istemiyorsak yaparız ama tanımlandığı class değerinde değişiklik yapılabilir.
*************************************************************
3-"Değişmez" (Immutable) ve "Salt Okunur" (ReadOnly) kavramlarını açıklayın. val değişkenler neden aslında "değişmez" değil de "salt okunur" olarak açıklanmalıdır?
read-only → ilk değer atamsından sonra tekrar değer atanamaz ama değerin içeriği değişitirilebilir.→val
immutable → değişken yada nesnenin durumu asla ilk değerden farklı olamaz, değişmezdir.→const val
Val değişkenlerin get fonksiyonu vardır bundan dolayı read-onlydir.
*************************************************************
4-"Tip Çıkarımı" (Type inference) kavramını açıklayın. Hangi durumlarda tip belirtmek kesin olarak gereklidir?
Değişken tiplerini belirtmediğimizde değişkenin tipini otomatik algılamasıdır.
	1-Nullable değişkenleri tanımlarken
	2-fonksiyon ve class parametreleri tanımlarken
	3-bir fonksiyonun geri dönüş tipi belirtmemiz gerektiğinde.
*************************************************************
5-Kotlin'de tüm değişkenlerin sınıf olarak bulunması, "ilkel tip" (primitive type) olmadıkları anlamına gelir mi? Arka planda neler oluyor?
hayır gelmez,Kotlinde herşey bir nesnedir.
Buna rağmen runtime da class olmayan primitive type hallerine optimize edilir.
bu değişken tipleri
-Numbers and Unsigned counter parts
-Booleans
-Characters
-Strings
-Arrays
*************************************************************
6-"Tip Güvenliği" (Type Safety) kavramını açıklayın.
Bir değişkenin bir tipi olması gerektiğidir. String bir değişken int değer atanamamasıdır.
*************************************************************
7-Bir değişkeni nullable yapmak için ne yapmalıyız?
Tipinin yanına ? işareti koyarız ve null değeri atarız.
*************************************************************
8-"Null Güvenliği" (Null Safety) kavramını açıklayın.
değerlerin null (boş) olma durumlarına karşı güvenli bir şekilde işlemesini ifade eder. 
1. if ile null kontrolü
2. Safe call operator: ?.
3. Elvis operator: ?:
4. Not null assertion : !! Operator
*************************************************************
9-Bir değişkene null değer atanır ve tip belirtilmezse Kotlin bu değişkeni nasıl yorumlar?
"Nothing?" şeklinde yorumlar
*************************************************************
10-İlkel bir değişkenin nullable olması ile null değer alamaması arasında bellek yönetimi açısından nasıl farklar vardır?
Primitive değişkenler stack üzerinde tutulurken Referance type li değişkenler heap üzerindedir.
*************************************************************
11-Nullable bir değişkenin bir değere sahip olması ile null olması arasında bellek yönetimi açısından nasıl bir fark vardır? Null değer almış bir değişken bellekte yer kaplamaz diyebilir miyiz?
Null değeri alan değişken bellekte yer kaplar. Çünkü null değeri alabilen bir nullable değişken stack üzerinde küçük bir alan kaplamıştır.
*************************************************************
12-Nullable bir değişkenle çalışırken hangi operatörleri kullanırız? Bu operatörlerin kullanım farkları nelerdir? Hangisini ne zaman kullanmak daha anlamlıdır?
1. if ile null kontrolü 
keko kod yazarken :)
2. Safe call operator: ?.
Eğer değişken null değilse, operatörün sağ tarafındaki işlem gerçekleştirilir; ancak değişken null ise, null değeri döner
3. Elvis operator: ?:
Bu operatör, nullable değişkenin null olması durumunda varsayılan bir değeri atamak için kullanılır.
4. Not null assertion : !! Operator
İşlemin null olmadığına emin olduğumuzda veya null gelen değerin bize gata fırlamasını istediğimiz kritik durumlarda.
*************************************************************
*************************************************************
#Sayılar#
*************************************************************
13-Kaç farklı tipte "number" sınıfı miras alan "alt sınıf" (child class) vardır? Bunların değer aralıkları neden önemlidir?
Byte
Short
Int
Long
Float
Double
Değer aralıkları bize bellek kullanımında önemlidir.
************************************************************
14-Eğer bir değişkene tip belirtimi yapılmaz ve bir değer atanırsa, Kotlin tip çıkarımını nasıl yapar?
Kotlin de type inference özelliği vardır. Belirtilen değerin default değerler arasında ise varsayılan tipler tipini belirler.
************************************************************
15-Float değişken oluştururken F ve f harfleri varken, Long değişken oluştururken neden küçük l harfi yoktur?
Küçük l harfi, 1 rakamına benzeyebilir. Bu da kod okunabilirliğini ve anlaşılırlığını azaltabilir.
************************************************************
16-Tek duyarlıklı (Single precision) ve Çift duyarlıklı (Double precision) kavramlarını açıklayın.
Single Precision
32 bit (4 bayt) bellek kullanır.
Yaklaşık 7 basamak ondalık basamak hassasiyeti sağlar.
Double Precision
64 bit (8 bayt) bellek kullanır.
Yaklaşık 16 basamak ondalık basamak hassasiyeti sağlar.
Tek duyarlıklı daha az bellek kullanır ve daha hızlı işlem yapılmasını sağlar, ancak daha az hassastır. Çift duyarlıklı daha fazla bellek kullanır ve daha yavaş işlem yapılmasını sağlar, ancak daha hassastır.
************************************************************
17-Double ve Float değişkenlerle çalışırken ondalık ayıracı olarak hangi işaretler kullanılır? Bu ayıraçların kullanımında nelere dikkat etmek gerekir?
Double ve float değişkenlerde ondalık ayracı olarak virgül (,) veya nokta (.) kullanılabilir. Kullanılan programlama diline ve bölgesel ayara göre bu iki işaretten biri tercih edilir.
************************************************************
18-Double ve Float değişkenler ondalık kısımda kaç basamağa kadar işlem yaparlar? Bu sınırın üzerinde gelen ondalık bilgileri için nasıl davranırlar? Hangi durumlar için Float ve hangi durumlar için Double kullanılmalıdır?
Double: 15-17 basamak ondalık basamak işleyebilir.
Float: 7 basamak ondalık basamak işleyebilir.
Ondalık basamak sınırı aşıldığında, ondalık sayılar yuvarlanır veya kesilir.
Yuvarlama, sayıyı en yakın tam sayıya yaklaştırır.
Kesme, ondalık basamak sınırından sonraki basamakları atar.
Double, float'tan daha fazla ondalık basamak işleyebilir. Hangi veri tipini kullanacağınız, uygulamanızın ihtiyaç duyduğu hassasiyete ve bellek kullanımına bağlıdır.
************************************************************
19-Ondalık(Decimal), Onaltılık (Hexadecimal) ve İkilik (Binary) değişkenleri Kotlin'de nasıl tanımlayabilirsiniz?
-Ondalık sayıları doğrudan tanımlayabilirsiniz.
-Onaltılık sayıları tanımlamak için sayıların önüne 0x veya 0X ekleyebilirsiniz.
-İkilik sayıları tanımlamak için sayıların önüne 0b veya 0B ekleyebilirsiniz.
************************************************************

