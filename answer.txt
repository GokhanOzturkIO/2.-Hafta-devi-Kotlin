# Temel Türler ve Null Güvenliği
## 1) val ile var arasındaki fark nedir?
 "val" keyword'ü  oluşturulduktan ve ilk değeri verildikten sonra yeni değer ataması yapılamayacak olan değişkenler için kullanılır. "var" keyword'ü ise daha sonra
 değiştirilebilir.


## 2) Bir var değişkeni val gibi davranmasını nasıl sağlayabiliriz val kelimesini kullanmadan? Bunu neden yapmak isteriz? Örnek bir senaryo verin.
 "var" keyword'ü ile oluşturulan bir değişkenin "set" metodunu private tanımlar isek "val" keyword'ü gibi davranacaktır. Bunu neden yapmak isteriz?
 örnek olarak initialize değeri olan bir değer tanımladık ve bunu daha sonra kullanıcıdan almak istiyoruz. Eğer bu değişkeni "val" keyword'ü ile oluşturursak
 initial değerinden sonra buna bir değer atayamayız. Fakat bu değişkeni "var" keywordu ile tanımlarsak initial değerinden sonra kullanıcıdan almamız gereken değeri
 aldıktan sonra "set" metodunu "private" a çekerek "val" keyword'ü gibi davranmasını sağlayabiliriz.
	Örnek Bir Senaryo (umarım :))
 Bionluk gibi bir uygulama tasarladığımızı düşünelim. Bir kullanıcı sınıfımız var ve biz bu kullanıcının kişisel bilgilerinin yanısıra birde yaptığı ilk iş sonucunda
 kazandığı ücretin miktarını tutmak istiyoruz. (Amacımız belli bir süre sonra kullanıcıya ilk işinde bu kadar kazanmıştın diyerek nostaljik bir an yaşatmak :D) Bu değişkenin
 adının "firstPay" olduğunu düşünelim. Eğer bu değişkeni "val" keyvord'ü ile tanımlarsak kullanıcı kayıt olduğunda "firstPay" değişkeni ilk olarak null değerini alacak ve bir daha 
 değiştirilemeyecektir. Fakat "var" keyword'ü ile oluşturup ilk değerini "null" verip daha sonra "set" metodunu "private" a çekerek, user classının içerisinde bu değişkene
 değer atamak için bir fonksiyon oluşturursak bu işlemi gerçekleştirebiliriz. Kullanıcı ilk ödemesini almadığı sürece bu değişken null da tutulup. Daha sonrasında gerekli
 fonksiyon ile değer atama işlemi yapılacaktır.

## 3)"Değişmez" (Immutable) ve "Salt Okunur" (ReadOnly) kavramlarını açıklayın. val değişkenler neden aslında "değişmez" değil de "salt okunur" olarak açıklanmalıdır?
 Immutable: Bir değişkenin değerinin bir kez atanmasından sonra o değerin değiştirilemeyeceği anlamına gelir. Yani bir kez oluşturulduktan sonra değeri değiştirilemez.
 ReadOnly:  Bir değişkenin değerinin okunabilir olduğunu ancak değiştirilemez olduğunu belirtir. Yani değeri sadece okunabilir ve üzerinde değişiklik yapılamaz.
 "val" keyword'ünün temsil ettiği değişken bir kez başlatıldıktan sonra, bu değişken bir referansın değerini tutar ve bu referans değişmez.Bu yüzden "val" keyword'ü 
 "readOnly" olarak ifade edilir.

## 4) "Tip Çıkarımı" (Type inference) kavramını açıklayın. Hangi durumlarda tip belirtmek kesin olarak gereklidir?
 Bir değişkenin tipinin IDE tarafından bilinmesi durumudur. Tip çıkarımı bazı karmaşık durumlarda yanılabilmektedir. Örneğin 2 tane aynı tipte max sayısal değeri
 birbiriyle çarptığımızda çıkan sonucun tipini biz belirlemezsek hata alırız. Burada "Type Inference" kavramı hatalı bir tip çıkarımı yapmış olur. Ornek olarak 
 2 max Integer sayının çarpımı Long bir ifadeye denk gelmelidir. Fakat tip çıkarımı ise sonucu atadığımız değişkeni Integer olarak gorecektir. Bu tarz durumlarda
 tip belirtmek kesin olarak gereklidir.

## 5) Kotlin'de tüm değişkenlerin sınıf olarak bulunması, "ilkel tip" (primitive type) olmadıkları anlamına gelir mi? Arka planda neler oluyor?
 Bu durum Kotlinde primitive type olmadığı anlamına gelmiyor. Kotlinde her şey bir nesnedir. Her değişkende üye fonksiyonlar ve özellikleri kullanılmaktadır. 
 Fakat Kotlin'de yazdığımız kodlar özel optimizasyonlar sayesinde byte code' a dönüşürken primitive değişkenlere dönüşmektedirler.

## 6) "Tip Güvenliği" (Type Safety) kavramını açıklayın.
 Tipi belirlenen bir değişkenin daha sonra tipinin değiştirilememesi durumudur. İlk başta esnekliği azaltan bir durum gibi gözüksede bence hayat kurtaran bir durumdur.
 Çünkü programlama dillerinde developer'ların en sık karşılaştığı hatalardan biri tip uyuşmazlığı hatalarıdır. Tip güvenliği bu hataların önüne geçmektedir.

## 7) Bir değişkeni nullable yapmak için ne yapmalıyız?
 Kotlinde bir değişkeni şu şekilde nullable yapabiliriz. "var/val name: type?"

## 8) "Null Güvenliği" (Null Safety) kavramını açıklayın.
 "Null Safety" kavramı bir programın veya yazılım bileşenlerinin null referanslar veya değerler nedeniyle ortaya çıkabilecek olan hataları önlemek amacıyla
 oluşturulan sistemdir.

## 9) Bir değişkene null değer atanır ve tip belirtilmezse Kotlin bu değişkeni nasıl yorumlar?
 "Nothing" tipi ile yorumlamaktadır.

## 10) İlkel bir değişkenin nullable olması ile null değer alamaması arasında bellek yönetimi açısından nasıl farklar vardır?
 Primitive bir değişken "Nullable" olursa primitive değil artık referans tipli bir değişken olmaktadır.

## 11)Nullable bir değişkenin bir değere sahip olması ile null olması arasında bellek yönetimi açısından nasıl bir fark vardır? Null değer almış bir değişken bellekte yer kaplamaz diyebilir miyiz?
 Hayır diyemeyiz. Çünkü;
 "Null" değer almış olan bir değişken bellekte az da olsa bir yer kaplar. Yani bir değişkenin nullable olması o değişkenin bellekte yer tutmadığı anlamına gelmemektedir.
 Stack'te bir değer tutuluyor ama Heap'te bir değer tutulmaması anlamına gelir. Fakat değer alması durumunda Heap' te de bir değer tutulması anlamına gelmektedir.

## 12) Nullable bir değişkenle çalışırken hangi operatörleri kullanırız? Bu operatörlerin kullanım farkları nelerdir? Hangisini ne zaman kullanmak daha anlamlıdır?
 Nullable değişkenlerle çalışırken "!!" ve "?" operatörleri kullanılır. "?" operatörü bu değeişkenin null olabileceğini IDE ye bildirme işlevini yapar ve kod buna
 göre çalışır. "!!" operatörü ise IDE ye bu değişkenin değerinin null olmayacağının teminatını vermektedir. Eğer null gelirse uygulamanın "crash" olmasının 
 önünü açmaktadır. Gerekli durumlarda bu iki operatörden biri kullanılmaktadır.


