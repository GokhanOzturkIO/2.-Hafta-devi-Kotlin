is ve !is operatörlerinin kullanımını açıklayın.
* Type checking ve type casting işlemlerinde kullanılır. Nesnenin belirli bi türe ait olup olmadığını kontrol eder. Sonuç olumlu ise true veya olumsuz ise false değerini döndürür. 


"Akıllı Dönüşüm" (Smart Cast) ne demektir? Farklı kod örnekleri ile açıklayın. Bu özelliğin sınırlamaları nelerdir?
* Type conversion işlemini daha güvenli ve kolay hale getiren bir özelliktir. Bir objenin belli koşullar sağlandığında otomatik olarak type ını değiştirmeye yarar. Örnek olarak verilebilecek kodlar;
fun example(str: String?) {
    if (str != null) {
        // Artık nullable değil String olarak işlem görür.
        println(str.length) // No need for null checks here
    }
}

fun process(obj: Any) {
    if (obj is String) {
        // Any type ında değil String type ındadır.
        println(obj.length) // No need for explicit casting here
    }
}

fun process(obj: Any) {
    when (obj) {
        is String -> println(obj.length) // Koşula göre eğer String Type ındaysa otomatik olarak Anyden String e çevrilir.
        is Int -> println(obj * 2) // Aynı şekilde Integer a çevrilir.
    }
}

Smart cast belli kısıtlamalara sahiptir . Bir sınıfın private olmayan alanlarında çalışır ve değişkenin içeriğinin değiştirilemez olması. Örnek verecek olursak List<Any> yi  is MutableList şeklinde yazdığımızda hata verir. Onun yerine  List<String> şeklinde yazmalıyız.



"Güvenli & Güvensiz" operatörler nelerdir?
* Güvenli çağrı "?" ile sağlanır. Null kontrolü yaptıktan sonra eğer null ise kodumuz hata vermeden devam edecektir. Güvensiz çağrı "!!" ile sağlanır. Null kontrolünden geçemezse kodumuz NullPointerException hatası verecektir.






