/*----------------------------------------------------------------------------------------------------------------------
                                         1- Temel Türler & Null Güvenliği
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
  1.1  val değeri get edilebilir ama set edilemez.readOnly durumdadır.Readonly durumdadır değeri okunabilir.
       var değeri hem set ve hemde get edilebilir.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
  1.2  var keywordunu(değişkeni) val gibi kullanmak istersek setini private yapıp readonly durumuna getiririz.Peron sınıfımda
 name değişkenim olsun dışardan erişen o değeri almasını isteyebilirim ama class içinde o değeri değiştirmek isteyebilirim.
 Bunun için bu yöntemi kullanırım.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
  1.3  -Immutable değeri hiçbir sekilde değişemez.
       -Readonly ise değeri okunabilir ama set edilemez.
       -Readonlynin nesnesi veya referansının durumu  değişebilir ama immutable  nesnesinin ve referansın değiştirmeninin
       hicbir yolu yoktur. val ise nesnesi veya referansının durumu değiştiği için readonlydir.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
  1.4   Programcı veri türünün belirtmeden IDE'nin veri türünü anlamasıdır.Tür Bildirimi yapmamız gereken yerler ise
  null bir tip bildirdiğimizde,fonksiyon geri dönüş değerinde ve parametlerinde bildiririz.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
  1.5 Kotlin'de, temel veri tipleri referans olarak temsil edilir; ancak derleyici, temel veri
  tiplerini optimize ederek ilkel türlere dönüştürür.(Bycode da  java koduna bakarsak primitive olarak tanımlanmıştır)
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
  1.6  Tip Güvenliği, derleme sırasında değişkenlerin türlerinin ve atanacak değerlerin türlerinin doğrulanmasıyla
  sağlanan bir programlama kavramıdır, böylelikle tür uyumsuzlukları önlenir.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
  1.7  var age : Int? = null  bu sekilde null bildirilir.Tür Bildirimi yapmak ve tür bildirimin sonuna "?" koymak
  zorundayız.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
  1.8 Bir programlama dilinde, değişkenlerin veya referansların null olabileceği durumları kontrol altına alarak null
  referanslarından kaynaklanan hataları önlemeyi amaçlayan bir kavramdır.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
  1.9 Bir programlama dilinde, değişkenlerin veya referansların null olabileceği durumları kontrol altına alarak null
  referanslarından kaynaklanan hataları önlemeyi amaçlayan bir kavramdır.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
  1.10 Nothing tipinde tutar.Nothing sınıfı "Asla var olmayan bir değeri" temsil etmek için kulllanılır.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
  1.11 primitive tipler kotlinde null değer alamazlar.Null olarak bildirilen değişkenler referans tipdir.
----------------------------------------------------------------------------------------------------------------------*/
  1.12 İlkel veri tipleri referansı ve değeri stackde tutulur.null değerler ise referans tipi olduğu için heapde tutulur.
/*----------------------------------------------------------------------------------------------------------------------
  1.13  !! -> Null olmasa karışma ben ona değer vericem anlamına gelir.Değer verilmesse NP fırlatır.
        ?. ->  Null gelebilir null gelirse de NP fırlatmaz.
        -> Bir bankacılık uygulamasında, kullanıcının bakiyesinin null olmamasını isteriz; aksi takdirde uygulamanın çökmesi,
 kullanıcının para miktarının hatalı şekilde görüntülenmesine ve hatta ciddi sorunlara yol açabilir. Bu tür kritik yerlerde,
 kullanıcı bakiyesinin null olmadığını doğrulamak için !! operatörünü kullanmak daha güvenli bir çözüm olabilir
----------------------------------------------------------------------------------------------------------------------*/
