-val ile var arasındaki fark nedir?
    "var" varsayılan olarak değiştirilebilir bir "değişken" iken "var" varsayılan olarak read-only bir değişkendir.

-Bir var değişkeni val gibi davranmasını nasıl sağlayabiliriz val kelimesini kullanmadan? Bunu neden yapmak isteriz? Örnek bir senaryo verin.
    değişkenin setterını private yaparak val gibi davrandırabiliriz. Örneğin classımız içindeki bir değerin sadece class içinden değiştirilebilmesini ama dışarıdan doğrudan modifiyeye kapalı olmasını isteyebiliriz.

-"Değişmez" (Immutable) ve "Salt Okunur" (ReadOnly) kavramlarını açıklayın. val değişkenler neden aslında "değişmez" değil de "salt okunur" olarak açıklanmalıdır?
    Değişmez değer gerçekten de değeri sonradan hiç değiştirilemez bir değerken "salt okunur" değer aslında sadece setterı private yapılmış, aslında atamasına bağlı olarak sürekli farklı değerler döndürebilen bir değerdir.

-"Tip Çıkarımı" (Type inference) kavramını açıklayın. Hangi durumlarda tip belirtmek kesin olarak gereklidir?
    Tip çıkarımı, değişken oluştururken açıktan ilan edilmemesine rağmen IDE'nin değişkene eşitlenen değere bakarak o değişkenin tipini belirleyebilmesidir. Nullable olması istenen değerler için açıkça tip belirtmek gerekir.

-Kotlin'de tüm değişkenlerin sınıf olarak bulunması, "ilkel tip" (primitive type) olmadıkları anlamına gelir mi? Arka planda neler oluyor?
    Kotlin'de derleme sırasında değişken sınıfları eğer varsa ilkel tip karşılıklarına dönüştürülerek optimizasyon sağlanır.

-"Tip Güvenliği" (Type Safety) kavramını açıklayın.
    Tip güvenliği sayesinde değişkenlere değer atanırken hatalı bir türde değer atanmaya çalışılması ve çökmeler daha kodu yazarken engellenir çünkü IDE uyarı verir.

-Bir değişkeni nullable yapmak için ne yapmalıyız?
    Değişkeni oluştururken belirttiğimiz tip keywordünün sonuna soru işareti koymalıyız(bkz: "String" -> "String?")

-"Null Güvenliği" (Null Safety) kavramını açıklayın.
    Null güvenliği, potansiyel olarak null dönebilecek değişkenlerin daha kod yazarken belirlenmesi ve eğer olmasaydı null dönmeleriyle oluşabilecek hataların baştan önlenmesini sağlayan bir özelliktir. Bunun için geliştiricinin, kullanacağı verilerin null olmadığından emin olması ve ona göre kod yazması beklenir(bkz: myVar?.toLowercase veya myVar!!.toLowercase)

-Bir değişkene null değer atanır ve tip belirtilmezse Kotlin bu değişkeni nasıl yorumlar?
    Kotlin bu değişkeni otomatik olarak "Nothing?" sınıfına dahil eder.