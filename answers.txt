TEMEL TÜRLER VE NULL GÜVENLİĞİ

1) val ile var arasındaki fark nedir?
Val immutabiliti değişemez olarak bilinsede aslında val readonly olarak geçer var ise mutability değişken olarak bilinir verilen değerleri değişebilir.
***************************************************************
2) Bir var değişkeni val gibi davranmasını nasıl sağlayabiliriz val kelimesini kullanmadan? Bunu neden yapmak isteriz? Örnek bir senaryo verin.
Var değişkenin get fonksiyonunu private yapmamızdır.Readonlye dönüşmesini sağlar. varda get ve set yapılırken read only'e dönüştüğünde sadece okuma izni verir
örnek olarak var user.name="güneş" verdiğimiz değere private set yaparsak ve user.name="Gülşen" yaptıgımızda hata alırız çünkü var değişkenimiz readonly olmuş olur.
***************************************************************
3) "Değişmez" (Immutable) ve "Salt Okunur" (ReadOnly) kavramlarını açıklayın. val değişkenler neden aslında "değişmez" değil de "salt okunur" olarak açıklanmalıdır?
Immutable oluşturuyan nesneyi değiştiremezsiniz.ReadOnly ise oluşturan nesneli değiştiremez ama içerikleri sadece okunablir.
***************************************************************
4) "Tip Çıkarımı" (Type inference) kavramını açıklayın. Hangi durumlarda tip belirtmek kesin olarak gereklidir?
Bir değişken tipinde değer atamasını belirtmek yerine sistem tarafından otomatik algılamasına type inference denir.Örnek ise val name = "Güneş" burada Güneşin String oldugunu otomatik algılıyor.
***************************************************************
5) Kotlin'de tüm değişkenlerin sınıf olarak bulunması, "ilkel tip" (primitive type) olmadıkları anlamına gelir mi? Arka planda neler oluyor?
Primiti sınıflar normal sınıf gibi gözüksede primitimitive hallerine optimize edilirler.
***************************************************************
6) "Tip Güvenliği" (Type Safety) kavramını açıklayın.
Type Safety türleri doğrulamak için kullanılır.Yanlış bir tür ataması yaptığımızda bize hata verir.
****************************************************************
7) Bir değişkeni nullable yapmak için ne yapmalıyız?
Bir değişkeni nullable yapmak için değişkenin türüne ? eklememiz gerekiyor örnegin String? gb.
*****************************************************************
8) "Null Güvenliği" (Null Safety) kavramını açıklayın.
Null olan bir ifadeleri sonradan kullanmak istediğimizde bunu bildirmesi ve kabul etmemesidir.
*****************************************************************
9) Bir değişkene null değer atanır ve tip belirtilmezse Kotlin bu değişkeni nasıl yorumlar?
Nothink olarak yorumlar
******************************************************************
10) İlkel bir değişkenin nullable olması ile null değer alamaması arasında bellek yönetimi açısından nasıl farklar vardır?
Primitive tipler stack alanında saklanırken referans tiplerin değişken adıstack değeri ise heapde saklanır.Bu yüzden Primitive tipler daha hızlıdırç
******************************************************************
11) Nullable bir değişkenin bir değere sahip olması ile null olması arasında bellek yönetimi açısından nasıl bir fark vardır? Null değer almış bir değişken bellekte yer kaplamaz diyebilir miyiz?
Hayır diyemeyiz çünkü Null ataması yaztığımız verinin bir değişken adı vardır buda stack'te yer kaplamasına sebep olur.
******************************************************************