1. is ve !is operatörlerinin kullanımını açıklayın.
- is operatoru degerin isteddigimiz tipte oldugunu , !is ise olmadıgını kontrol ederr.

2. "Akıllı Dönüşüm" (Smart Cast) ne demektir? Farklı kod örnekleri ile açıklayın. Bu özelliğin sınırlamaları nelerdir?
- Derleyicinin otomatik olarak bir degiskenin turunu belirli bir kontrol veya islem snrasinda daha spesifik bir ture donusturmesi anlamina gelir. Orn: 
  val value : Any
   if(any is String){
  // value otomatik olarak String kabul edilir.
   printl(value.length)
}

  val value2: String
  when(value2){
is String -> "String ${value2.lenght}"
is Int -> "int"
else -> "Unknown"}

3. "Güvenli & Güvensiz" operatörler nelerdir?
- Güvenli ve güvensiz operatorşer null check sirasinda kullanilan operatorlerdir. Güvenli operatorler: ?. ve ?: 
 Bu operatorler deger null ise degeri null alip isleme devam eder. 
Güvenzi operator:  !!.   Bu operator null deger yoksa islemi yaoar, varsa nullpointerException firlatir. uygulama 
crash olur.

4. Sayısal değişkenlerde örtük tip genişletme (implicit widening conversions) ne demektir? Kotlin'de bu neden yapılamaz?
- Sayisal degiskenlerde ,daha kucuk deger aralikli turun (orn int), daha buyuk aralıkli ture (orn long) otomatik olarak donusturulmesidir. Bu kotlinde implicit sekilde yapilamaz. kotlinde acikca hangi tipe donusturecegimizi soylemek gerekir.  Kotlinde bu tip guvenligi ve turun acikca belirtilmesi kodun okunabilri olmasini sagladigindan dolayi yapilamaz.















