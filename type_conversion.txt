1. is ve !is operatörlerinin kullanımını açıklayın.
- is operatoru degerin isteddigimiz tipte oldugunu , !is ise olmadıgını kontrol ederr.

2. "Akıllı Dönüşüm" (Smart Cast) ne demektir? Farklı kod örnekleri ile açıklayın. Bu özelliğin sınırlamaları nelerdir?
- Derleyicinin otomatik olarak bir degiskenin turunu belirli bir kontrol veya islem snrasinda daha spesifik bir ture donusturmesi anlamina gelir. Orn: 
  val value : Any
   if(any is String){
  // value otomatik olarak String kabul edilir.
   printl(value.length)
}

  val value2: String
  when(value2){
is String -> "String ${value2.lenght}"
is Int -> "int"
else -> "Unknown"}

3. "Güvenli & Güvensiz" operatörler nelerdir?
- Güvenli ve güvensiz operatorşer null check sirasinda kullanilan operatorlerdir. Güvenli operatorler: ?. ve ?: 
 Bu operatorler deger null ise degeri null alip isleme devam eder. 
Güvenzi operator:  !!.   Bu operator null deger yoksa islemi yaoar, varsa nullpointerException firlatir. uygulama 
crash olur.

4. Sayısal değişkenlerde örtük tip genişletme (implicit widening conversions) ne demektir? Kotlin'de bu neden yapılamaz?
- Sayisal degiskenlerde ,daha kucuk deger aralikli turun (orn int), daha buyuk aralıkli ture (orn long) otomatik olarak donusturulmesidir. Bu kotlinde implicit sekilde yapilamaz. kotlinde acikca hangi tipe donusturecegimizi soylemek gerekir.  Kotlinde bu tip guvenligi ve turun acikca belirtilmesi kodun okunabilri olmasini sagladigindan dolayi yapilamaz.

5. "val b: Byte = 1 ile val i: Int = b ve son olarak print(b == i) gibi bir kod yazıldığında çıktı ne olur? Neden böyle bir çıktı aldığınızı açıklayın.
- Bir Byte tipte degisken otomatik plarak Int turune cevrilemez. Ayrıca Int ve Byte turleri arasinda bir karsilastirma yapilamaz. Ve Kotlin implicit conversion desteklemedigi icin Byte turundeki degisken otomatik olarak Int turune cevrilmez ve karsilastirma yapilamaz.

6. "val b: Byte = 1 ile val i: Int = b.toInt() ve son olarak print(b == i) gibi bir kod yazıldığında çıktı ne olur? Neden böyle bir çıktı aldığınızı açıklayın.
- Burada Int turune bir explicit conversion yapilmis fakat yine print ile karsilastirma yapilamiyor cunku b value 'su hala Byte tipinde. 

7. Sayısal değişkenlerde açık dönüşüm (Explicit Type Conversion) yaparken hangi fonksiyonları kullanabilirsiniz?
- toByte(), toShourt , toInt(), toDouble(), toLong(), toFloat gibi fonksiyonlari kullanabiliriz.

8. "val result = 1L + 3" // "Long + Int" gibi bir işlemin sonucunda "result" değişkeninin tipi ve değeri ne olur? Neden böyle olduğunu açıklayın.
- resul degiskeninn tipi Long olur. cunku sayisal islemlerde sonucun tipi; isleme giren degerlerden tipi en buyuk  olanin degerini alir. Bu bir kuraldir. 















