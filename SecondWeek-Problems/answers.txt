Temel Türler & Null Güvenliği


Soru 1: val ile var arasındaki fark nedir?

Cevap: Val: Value/Immutable: İlk aldığı değer değiştirilemez olarak bilinen değişkendir.
       Var: Variable: Değişebilir değişkendir.

Çok bilinenin aksine val değişkene immutable yerine ready only denilmelidir.

Performans açısından farklarına bakacak olursak yok denecek kadar azdır.
Eğer akademik level'da bir konu ise ve salt dümdüz bir kodu konuşuyorsak (var) kullanmak daha performanslı ama çok küçük bir performans farkı bu.

Günlük hayat problemlerinde ise (val) kullanmak var'a göre daha avantajlı hale geliyor çünki; Thread işlemlerden dolayı var maliyet ve performansta düşüş yaşatıyor.
--------------------------------------------------------------------------------------
Soru 2:Bir var değişkeni val gibi davranmasını nasıl sağlayabiliriz val kelimesini kullanmadan? Bunu neden yapmak isteriz? Örnek bir senaryo verin.

Cevap: Basitçe örnek verecek olursak 

       class Person {

       val name:String = "Sena"
       var surname:String = "GEZER"
       private set 
                     {
Bu senaryoda, surname değişkeni var olarak tanımlanmış ancak set metodu private olarak ayarlanmıştır. Bu, surname değişkeninin sadece sınıf içinde değiştirilebileceği anlamına gelir ve sınıf dışından doğrudan erişim engellenir. Bu durum, değişkenin kontrol altında tutulmasını ve doğrudan erişimin engellenmesini sağlar.

-------------------------------------------------------------------------------------
Soru 3: "Değişmez" (Immutable) ve "Salt Okunur" (ReadOnly) kavramlarını açıklayın. val değişkenler neden aslında "değişmez" değil de "salt okunur" olarak açıklanmalıdır?

Cevap: Val değişkenlere genellikle immutable denildiğini duyarız ancak bu yanlıştır çünkü ımmutable derken asla değiştirilemez anlamına gelir. Val değişkenler ise değeri okunabilen yani (ReadOnly) ama değişemez anlamına gelmez, değeri okunup set edilemeyen değişkendir. 

Ama biz basitçe,val değişkeninin değerinin değişebilir olduğunu göstermek için örnek verecek olursak bir classtaki val değişkeninin get fonksiyonuna sabit bir değer değilde değişkenlerden oluşan bir işlemin sonucunu verirsek bu işlemin sonucu değişkenlerin değerine bağlı olarak değişeceği için her seferinde biz available space çağırdığımızda yani bu val değişkeni çağırdığımızda farklı sonuçlar alabiliriz. 
Dolayısıyla immutable değil ReadOnly'dir val değişkenler.
---------------------------------------------------------------------------------------
Soru 4: "Tip Çıkarımı" (Type inference) kavramını açıklayın. Hangi durumlarda tip belirtmek kesin olarak gereklidir?

Cevap: Eşitliğin sağ tarafında bir value varsa siz o değişkenin tipini vermeseniz bile diğer taraftaki değere bakarak değişkenin tipinin ne olacağına karar verir Ide, buna type inference denir. 
Nullable kullanırken yani null değerleriyle çalışırken kesin olarak belirtmesi gereklidir. 

Type inference tanımına ek olarak; sayısal değerler için eğer ki verilen değer integer değer aralığının içindeyse o zaman integer set edilir. Yani byte ve short aralığında olsa bile integer set edilir. Ama integerdan daha büyük bir değer aralığındaysa her zaman long set edilir.
-------------------------------------------------------------------------------------
Soru 5: Kotlin'de tüm değişkenlerin sınıf olarak bulunması, "ilkel tip" (primitive type) olmadıkları anlamına gelir mi? Arka planda neler oluyor?

Cevap: Kotlinde primitive değişken tipleri class olarak görünseler bile yapılan özel optimizasyonlarla bytecode çevrilirken java tarafındaki gerçek primitive tiplere karşılık gelir.
-------------------------------------------------------------------------------------
Soru 6:"Tip Güvenliği" (Type Safety) kavramını açıklayın.

Cevap: Kotlin tip güvenliğini sağlamak için bazı parametreler geliştirmiştir bunlar;

-Tür Belirleme (Type Inference):Kotlin, değişkenlerin türünü otomatik olarak belirleme yeteneğine sahiptir.

-Null Güvenliği (Null Safety):Kotlin, null referanslarını önlemek için güçlü bir null güvenliği sistemine sahiptir. Değişkenlerin varsayılan olarak null olamayacak şekilde tanımlanması ve nullable türlerin açıkça belirtilmesi, null ile ilgili hataları minimize eder.

-Tür Dönüşümleri (Type Casts):Kotlin, tür dönüşümleri sırasında güvenli olmayan işlemleri engellemek için güvenli tür dönüşümlerini destekler. Güvenli bir tür dönüşümü için as? operatörü kullanılır.

Bu parametreler,geliştiricilere programlarını yazarken daha az hata yapma ve daha güvenli bir kod üretme imkanı sağlar.

---------------------------------------------------------------------------------------
Soru 7: Bir değişkeni nullable yapmak için ne yapmalıyız?

Cevap: Bir değişkene null değer ataması yapmak istiyorsak o değişken tipinin sonuna ? koyup = null diyoruz.

Val name:String? =null

Herhangi bir veri dipinin sonuna soru işareti koyarak onu nullayabilirsiniz, her veri tipinde bu yapılabiliyor.
---------------------------------------------------------------------------------------
Soru 8: "Null Güvenliği" (Null Safety) kavramını açıklayın.

Cevap: Kotlin'de "Null Güvenliği" (Null Safety), uygulamalarda null referans hatalarını önlemek ve daha güvenli bir programlama deneyimi sağlamak için tasarlanmış bir özelliktir. Null güvenliği, uygulama kodunda null referanslarının daha etkili bir şekilde yönetilmesini sağlar ve böylece çoğu null referans hatasını önler.

Null güvenliğinin temel özellikleri:
-Nullable Türler(?)
-Güvenli Çağrılar (Safe Calls)
-Elvis Operatörü (Elvis Operator)
-!! Operatörü (Not-Null Assertion Operator)
---------------------------------------------------------------------------------------
Soru 9:Bir değişkene null değer atanır ve tip belirtilmezse Kotlin bu değişkeni nasıl yorumlar?

Cevap: Eğer bir değişkenin tipini belirtmeden null değer atıyorsanız, kotlin bunun tipini bilmediği için nullable bir "Nothing" şeklinde yorumlar.Nothing genellikle bir işlevin hiçbir şey döndürmediğini belirtmek için kullanılır.
-------------------------------------------------------------------------------------

