Temel Türler & Null Güvenliği

1-> val ile var arasındaki fark nedir?
var mutable bir değişkendir val ise read-only bir değişkendir. var değişkeni tanımlandığında otomatik olarak getter ve setter metodları oluşturulur ancak val'da sadece getter metodu oluşturulur.

2-> Bir var değişkeni val gibi davranmasını nasıl sağlayabiliriz val kelimesini kullanmadan? Bunu neden yapmak isteriz? Örnek bir senaryo verin.
Bunu var'ın setter'ına private eklediğimizde sağlarız. Aynı class içinde değiştirmek isteyip farklı classlarda sadece okumak isteyebiliriz.

3-> "Değişmez" (Immutable) ve "Salt Okunur" (ReadOnly) kavramlarını açıklayın. val değişkenler neden aslında "değişmez" değil de "salt okunur" olarak açıklanmalıdır?
Değişmez bir kere yazıldığında bir daha değeri değişmeyecek demektir.Read-only'de ise sadece okunur başka bir yerde değeri değişebilir. val değişkenlerde aslında çok bilinenin aksine read-onlydir. Çünkü val değişkenin değerini şu şekilde değiştiririz. 
var a = 20 
var b = 50
val toplam = a+b 
Yazdığımızda her a veya b yi değiştirdiğimizde val daki sonuç değişir.

4-> "Tip Çıkarımı" (Type inference) kavramını açıklayın. Hangi durumlarda tip belirtmek kesin olarak gereklidir?
Type inference bizi fazla kod yazmaktan kurtarır Örneğin değişken yazdığımızda tipini belirtmezsek bunu bizim için hangi tipte olduğunu anlar ve arka planda oluşturur.Null değişken yazıldığında veya değer ataması sonra yapılıcaksa tip belirtmek gereklidir.

5-> Kotlin'de tüm değişkenlerin sınıf olarak bulunması, "ilkel tip" (primitive type) olmadıkları anlamına gelir mi? Arka planda neler oluyor?
Hayır aslında değişkenler sınıf olarak bulunur ama derleme esnasında primitve type olurlar. 