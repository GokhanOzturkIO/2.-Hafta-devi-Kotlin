Temel Türler & Null Güvenliği

1-> val ile var arasındaki fark nedir?
var mutable bir değişkendir val ise read-only bir değişkendir. var değişkeni tanımlandığında otomatik olarak getter ve setter metodları oluşturulur ancak val'da sadece getter metodu oluşturulur.

2-> Bir var değişkeni val gibi davranmasını nasıl sağlayabiliriz val kelimesini kullanmadan? Bunu neden yapmak isteriz? Örnek bir senaryo verin.
Bunu var'ın setter'ına private eklediğimizde sağlarız. Aynı class içinde değiştirmek isteyip farklı classlarda sadece okumak isteyebiliriz.

3-> "Değişmez" (Immutable) ve "Salt Okunur" (ReadOnly) kavramlarını açıklayın. val değişkenler neden aslında "değişmez" değil de "salt okunur" olarak açıklanmalıdır?
Değişmez bir kere yazıldığında bir daha değeri değişmeyecek demektir.Read-only'de ise sadece okunur başka bir yerde değeri değişebilir. val değişkenlerde aslında çok bilinenin aksine read-onlydir. Çünkü val değişkenin değerini şu şekilde değiştiririz. 
var a = 20 
var b = 50
val toplam = a+b 
Yazdığımızda her a veya b yi değiştirdiğimizde val daki sonuç değişir.

4-> "Tip Çıkarımı" (Type inference) kavramını açıklayın. Hangi durumlarda tip belirtmek kesin olarak gereklidir?
Type inference bizi fazla kod yazmaktan kurtarır Örneğin değişken yazdığımızda tipini belirtmezsek bunu bizim için hangi tipte olduğunu anlar ve arka planda oluşturur.Null değişken yazıldığında veya değer ataması sonra yapılıcaksa tip belirtmek gereklidir.

5-> Kotlin'de tüm değişkenlerin sınıf olarak bulunması, "ilkel tip" (primitive type) olmadıkları anlamına gelir mi? Arka planda neler oluyor?
Hayır aslında değişkenler sınıf olarak bulunur ama derleme esnasında primitve type olurlar. 

6-> "Tip Güvenliği" (Type Safety) kavramını açıklayın.
"Tip Güvenliği" (Type Safety), bir programlama dilinde tip sistemine dayalı olarak, tip hatalarını önleyen veya en aza indiren bir özelliktir. Bu özellik, programcının belirli türler arasında uyumsuzluklardan kaynaklanan hataları hemen fark etmesine ve bu hataları önlemesine yardımcı olur.

7-> Bir değişkeni nullable yapmak için ne yapmalıyız?
Bir değişkenin null olması için tip'inin yanına '?' koymamız gereklidir. örneğin = val calculate: Int? = null

8-> "Null Güvenliği" (Null Safety) kavramını açıklayın.
"Null Güvenliği" (Null Safety), bir programlama dilinde veya bir dilin bir kısmında, değerlerin null (boş, tanımsız) olabileceği durumları kontrol altına almak ve bu durumları daha güvenli hale getirmek için kullanılan bir özelliktir. Null güvenliği, programcıların null referanslarından kaynaklanan hataları önlemesine ve kodlarını daha güvenilir hale getirmesine yardımcı olur.

9-> Bir değişkene null değer atanır ve tip belirtilmezse Kotlin bu değişkeni nasıl yorumlar?
Değeri nothing olarak belirlenir ve işe yaramayan bir değişken olurlar.

10-> İlkel bir değişkenin nullable olması ile null değer alamaması arasında bellek yönetimi açısından nasıl farklar vardır?
Nullable değişkenler bellekte daha fazla yer kaplar çünkü class olarak tutulurlar.Null olmayanlar daha az yer kaplar çünkü primitive tipte yer alırlar.

11-> Nullable bir değişkenin bir değere sahip olması ile null olması arasında bellek yönetimi açısından nasıl bir fark vardır? Null değer almış bir değişken bellekte yer kaplamaz diyebilir miyiz?
Şöyle bir fark vardır.Nullable değişkenin bir değere sahip olması durumunda, bellekte o değeri tutacak kadar yer ayrılır.Ama eğer nullable değişken null değerine sahipse, bu durumda bellekte ayrılmış bir değer yoktur.

12-> Nullable bir değişkenle çalışırken hangi operatörleri kullanırız? Bu operatörlerin kullanım farkları nelerdir? Hangisini ne zaman kullanmak daha anlamlıdır?
Null Koalesans Operatörü (?:) = Bu operatör, bir nullable ifade null ise, başka bir değeri kullanmamızı sağlar.

Güvenli Çağrı Operatörü (?.) = Bu operatör, nullable bir değişkene güvenli bir şekilde erişmemizi sağlar. Eğer değişken null ise, hemen hata fırlatmaz ve ifade null olarak değerlendirilir.

Elvis Operatörü (?:) = Bu operatör, bir ifade null değilse onu kullanır, null ise başka bir değeri kullanır.

!! Operatörü = Bu operatör, bir nullable ifadeyi zorlu bir şekilde (force) null olmayan türüne dönüştürür.
Ancak bu operatörü kullanmak, dikkatlice ele alınmalıdır, çünkü eğer ifade null ise, NullPointerException hatası alınabilir.


 