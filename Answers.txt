1- val ile var arasındaki fark nedir?

Kotlin dilinde değişken tanımlamak için iki keyword bulunur: “val” ve “var”. Değerlerini değiştirmek istemediğimiz değişkenleri tanımlamak için “val” kullanmalıyız. Ancak tanımlayacağımız değişken farklı değerler alabiliyorsa bu değişkeni “var” ile tanımlamalıyız. Bu konu özelinde birçok medium makalesi ve farklı kaynakta val = immutable (değişmez), var = mutable (değiştirilebilir) ifadesi kullanılmaktadır bu ifade teknik olarak doğru değildir. Developer Android sitesinde dahi “val” değişkenler için “whose value never changes” (değeri asla değişmeyen) ifadesi kullanılsa da “val” ile tanımlanmış bir değişken farklı sonuçlar tutabilir. Bu nedenle “val” keyword’ü için doğru tanımlama “immutable” (değişmez) değil, “read-only” (sadece okunur) olmalıdır.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2- Bir var değişkeni val gibi davranmasını nasıl sağlayabiliriz val kelimesini kullanmadan? Bunu neden yapmak isteriz? Örnek bir senaryo verin.

Kotlinde her değişken bir property’dir bu nedenle değişkenin set fonksiyonunu private yaparak, bu değişkeni read-only hale getirebiliriz. Ancak bu özelliği kullanabilmek
için class içerisinde olmamız gerekli. Peki bu özelliği neden kullanmak isteriz bu yapıyı kullanmanın tek avantajı oluşturduğumuz değişkenin yalnızca oluşturulduğu class
içerisinde değiştirilebilmesini sağlamak, yani farklı class'lardan değişkenin değiştirilmesini engellemek. Örnek bir senaryoyu da şu şekilde verebiliriz, bir A class'ı
içerisinde matematiksel hesaplama işlemi yapıyoruz ve elimizde Pi sayısı benzeri sabitler var bunların okunabilmesini ancak değiştirilmemesini istiyorsak bu şeilde erişimi
kısıtlayabiliriz.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------