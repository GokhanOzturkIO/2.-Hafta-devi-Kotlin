Temel Türler & Null Güvenliği
------------------------------

1. val ile var arasındaki fark nedir?

- Val değeri değiştirilemeyen, sabit değişkendir. Var ise mutable, değerini istediğimiz kadar değiştirebildiğimiz bir değişkendir. Val read-only yani değeri okunabilir ama set edilemez.

................

2. Bir var değişkeni val gibi davranmasını nasıl sağlayabiliriz val kelimesini kullanmadan? Bunu neden yapmak isteriz? Örnek bir senaryo verin.

- Var değişkenin set fonksiyonunu private yaparak class'ın içinde birden fazla değerini değiştirmek isteriz ancak dışarıdan değiştirilmemesini sağlarız. Örneğin Car adında bir class'ımız olsun ve bunun da içinde model adında bir var değişkeni olsun. Bu model değişkenini private set yapmış olalım. Biz model değişkenini class'ın içerisinde de değerini değiştirebiliriz, bir fonksiyon oluşturup da değerini değiştirebiliriz. Ancak class dışında herhangi bir yer bu değişkene yeni değer atayamayız çünkü izin vermez. 

................

3. "Değişmez" (Immutable) ve "Salt Okunur" (ReadOnly) kavramlarını açıklayın. val değişkenler neden aslında "değişmez" değil de "salt okunur" olarak açıklanmalıdır?

- Değişmez (Immutable), değerini istediğimiz kadar değiştirebildiğimiz anlamına gelir. ReadOnly ise, değeri okunabilen ama set edilemeyen anlamına gelir. ReadOnly ve Immutable arasında ince bir fark vardır. Bu, kendisinin değişmez olduğu anlamına gelmez; sadece atanan değerin tekrar değiştirilemeyeceği anlamına gelir. 

................

4. "Tip Çıkarımı" (Type inference) kavramını açıklayın. Hangi durumlarda tip belirtmek kesin olarak gereklidir?

- Bir değişkeni oluştururken değer atamasını yaparsak, değişken tipini belirtmeye gerek yoktur. Ancak, değişkene değer ataması başlangıçta yapmacak isek tipini belirtmek gerekiyor. Örneğin:

val age = 32 -> IDE kızmaz çünkü girdiğimiz sayıdan dolayı değerin tipini bilir.

var eyeColor: String
eyeColor = "Brown"   -> IDE kızmaz çünkü değerini başlangıçta vermesek de tipinin ne olacağını belirttik. 

var skinTone
skinTone = "White"   -> IDE kızar çünkü tipi hiçbir yerde belirtilmemiş. Bunu düzeltmek için ya ilk değer ataması yapılmalı ya da tipi verilmeli.

................

5. Kotlin'de tüm değişkenlerin sınıf olarak bulunması, "ilkel tip" (primitive type) olmadıkları anlamına gelir mi? Arka planda neler oluyor?

- Kotlin'de class gibi gözüken değişken tipleri özel optimizasyonlarla byte code'a çevrilirken yine primitive olacak şekilde tanımlanırlar.

................

6. "Tip Güvenliği" (Type Safety) kavramını açıklayın.

- Tipe Safety, değişkenlere doğru değer atanması ile ilgili bir kavramdır. Değişkenlerin tipleri ile atanan değerlerin tipleri arasında farklılık olmaması gerekir. Örneğin int bir değişkene String değer vermek hata almamıza neden olur. 

................

7. Bir değişkeni nullable yapmak için ne yapmalıyız?

- Bir değişkeni nullable yapmak için, değişken tipinin sonuna ? İşareti konulur. 

val name: String? = null

................

8. "Null Güvenliği" (Null Safety) kavramını açıklayın.

- Bir değerin null olabileceği durumları ele alır ve bu null değerlerin beklenmedik hatalara yol açmasını önler.

................

9. Bir değişkene null değer atanır ve tip belirtilmezse Kotlin bu değişkeni nasıl yorumlar?

- Eğer bir değişkene tip verilmez ve direkt full değer ataması yapılırsa, IDE tip çıkarımı yaparken bu değişkenin değerini Nothing? Olarak işaretler. Çünkü hangi tipe karşılık geldiğini bilemez.

................

10. İlkel bir değişkenin nullable olması ile null değer alamaması arasında bellek yönetimi açısından nasıl farklar vardır?

- Bir değişken nullable olduğunda bellekte iki farklı durum için yer ayrılır: gerçek değer için ve null değer için. Dolayısıyla, bellek kullanımı artar. Ancak, null değer alamayan bir değişken sadece gerçek değeri tutar. Bu nedenle daha az bellek kullanır. Nullable değişkenlerde, kodunuzda null değer kontrolü yapmak gerek. Null değer alamayan bir değişken ise bir değere sahiptir, dolayısıyla kod daha basit ve daha hızlı çalışabilir. 

................

11. Nullable bir değişkenin bir değere sahip olması ile null olması arasında bellek yönetimi açısından nasıl bir fark vardır? Null değer almış bir değişken bellekte yer kaplamaz diyebilir miyiz?

- Nullable bir değişkenin bir değere sahip olması veya null olması bellekte bir miktar yer kaplar. Yani, null değer almış bir değişkenin bellekte yer kaplamadığını söyleyemeyiz.

................

12. Nullable bir değişkenle çalışırken hangi operatörleri kullanırız? Bu operatörlerin kullanım farkları nelerdir? Hangisini ne zaman kullanmak daha anlamlıdır?

- Kotlin'de null olan bir veriyle işlem yapıldığında kullanılacak iki operatör vardır:

!!. -> "Değer null olsa da olmasa da bana bırak. Gerekirse uygulama patlasın ama değer değişmesin", anlamına gelir.
?. -> "Bu değer çok önemli değil. Null gelirse uygulamayı patlatma", anlamına gelir.

................

Sayılar
------------------------------

1. Kaç farklı tipte "number" sınıfı miras alan "alt sınıf" (child class) vardır? Bunların değer aralıkları neden önemlidir?

- Number sınıfı miras alan 6 alt sınıf vardır. Bunlar: Byte, Short, Int, Long, Float ve Double'dır. Bu alt sınıflardan ilk dördü tam sayıları ifade ederken son iki tanesi ondalıklı sayılar için kullanılır. Hepsinin değer aralıkları birbirinden farklıdır. Tam sayılar için en küçük değer aralığı Byte iken en büyük değer aralığı ise Long'dur. Değer aralıklarının farklı olması uygun veri tipini seçerek bellek kullanımının ve işlem hızının daha iyi kontrol edilebilmesine olanak tanır. Ayrıca vereceğimiz değerin de hangi aralıklarda olacağını biliriz. 

................

2. Eğer bir değişkene tip belirtimi yapılmaz ve bir değer atanırsa, Kotlin tip çıkarımını nasıl yapar?

- Kotlin, değişkenin değerini belirtmesek de değişkenin değerine ve atanan değerin türüne göre tip çıkarımı yapabilir. Eğer atanan değer sayı içeriyorsa değer aralığı ne olursa olsun default olarak Kotlin onu int olarak algılar veya metin içeren bir değerse bunu String olarak belirtmesek de hata vermez. 
