KONU: Temel Türler & Null Güvenliği

#1 val ile var arasındaki fark nedir?

val tipindeki bir değişkene yalnızca 1 defa değer atanabilir edilebilir ancak daha sonra yeni adeğerler atanamaz.
var tipinde ise istediğimiz kadar değişiklik yapabiliriz.
val -> value, var -> variable kelimelerinden gelir.

------------------------------------------------------------

#2 Bir var değişkeni val gibi davranmasını nasıl sağlayabiliriz val kelimesini kullanmadan? Bunu neden yapmak isteriz? Örnek bir senaryo verin.

İlk değer atanma işlemine kadar val ve var değişkenler arasında pek bir fark yoktur. Önemli fark ilk değer atamadan sonra bir daha val değişkene değer atanamamasıdır.
Bunu belirli bir seviyede var değişkene yapmak istiyorsak var değişken tanımlandıktan sonra değişkenin setter'ını private hale getirebiliriz.

Bunu yaptığımızda nesne üzerinden değişkene erişip direkt olarak değer ataması yapılamaz.
Ancak nesne ile sınıf içerisindeki metodlara erişim sağlanabiliyorsa ve bu metodlar içerisinde var değişkenin değerinde değişiklik yapılıyorsa bunu bu yöntemle engelleyemeyiz.

class Visibility {
    var myValue: String = "I act like 'val'"
        private set
}

Bu yöntemi kullanmamızdaki amaç değişkene dışarıdan nesne yardımıyla direkt olarak erişilip değişiklik yapılmamasını istememiz olabilir. Daha kontrollü bir kod yazmış oluruz.
Aynı zamanda gerektiğinde nesne üzerinden gerekli metodlar ile değişkende değişiklik yapılmasına da izin verilmiş olur.

------------------------------------------------------------

#3 "Değişmez" (Immutable) ve "Salt Okunur" (ReadOnly) kavramlarını açıklayın. val değişkenler neden aslında "değişmez" değil de "salt okunur" olarak açıklanmalıdır?

Immutable durumunda bir nesne oluşturulurken (declaration aşamasında) atama yapılır ve sonra bir daha yeni atama yapılamaz. Bu durum değişmez olarak tanımlanabilir. örnek -> const val --> must be initialized
Read-Only durumunda nesne herhangi bir değer almadan oluşturulup (declaration esnasında) daha sonraki aşamalarda yalnızca 1 defa değer ataması yapılabilir.
val değişkenler declaration aşamasında iki durumla da kullanılabiliyor. Hem oluştururken değer atayabiliyoruz hem de oluşturduktan sonra değer atayabiliyoruz. Bu yüzden de val değişkenlerin read-only olarak açıklanması daha doğrudur.

------------------------------------------------------------

#4 "Tip Çıkarımı" (Type inference) kavramını açıklayın. Hangi durumlarda tip belirtmek kesin olarak gereklidir?

Type inference kotlin dilinin bir özelliğidir. Bu özellik sayesinde değişkenleri deklare ederken veri türünü belirtmemize gerek olmaz.
Kotlin bunu arka planda uygun bir veri türüyle eşleştirecektir.

Nullable durumlarda kesinlikle tip belirtmemiz lazım.
Normal koşullarda bir tamsayı deklare ettiğimizde Kotlin Int sınırları içerisindeyse bunu otomatik olarak Int olarak tanımlar. Eğer biz bunu 'en baştan' Short ya da Long olarak tanımlamak istiyorsak tipini belirtmemiz lazım.

------------------------------------------------------------

#5 Kotlin'de tüm değişkenlerin sınıf olarak bulunması, "ilkel tip" (primitive type) olmadıkları anlamına gelir mi? Arka planda neler oluyor?

Bu konu hakkında Medium üzerinde yayınladığım yazıma göz atabilirsiniz. --> https://madenyasin.medium.com/kotlinde-pirimitive-de%C4%9Fi%C5%9Fkenler-abf1933c0941

------------------------------------------------------------