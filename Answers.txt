1-val ile var arasındaki fark nedir? Sorusunun Cevabı:

-->val(value),değeri sonradan değiştirilemez anlamındadır.Ek olarak get edilebilir fakat set edilemez.
-->var(variable),değeri sonradan değiştirilebilir anlamındadır. Get ve set işlemi yapılabilmektedir.
-->Bilinenin aksine val "immutable değil read-only'dir".Şimdi bunların ne olduğuna değinelim:
-->Read-only: Bir nesnenin durumunun değiştirilemez olduğu, yalnızca okunabilir olduğu anlamına gelir. Bu durumda, nesnenin içeriği değiştirilemez, ancak nesne referansı değiştirilebilir olabilir. Örneğin, bir liste "read-only" olabilir, yani listenin içeriği değiştirilemez, ancak listenin kendisi başka bir listeyle değiştirilebilir.
-->Immutable: Bir nesnenin durumunun hem içeriği hem de referansı değiştirilemez olduğu anlamına gelir. Yalnızca okunabilir ve değiştirilemez bir nesne olduğu söylenebilir. Örneğin, bir "immutable" liste, hem listenin içeriği hem de referansı değiştirilemez.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2-Bir var değişkeni val gibi davranmasını nasıl sağlayabiliriz val kelimesini kullanmadan? Bunu neden yapmak isteriz? Örnek bir senaryo verin. Sorusunun Cevabı:

-->Bir var değişkenini val gibi davranmasını sağlamak için, değişkenin erişim düzeyini private yapabilir ve ayrıca set erişim belirleyicisini private olarak tanımlayabiliriz. 
-->Bu şekilde, değişkenin değeri sadece sınıf içinde atanabilir ve dışarıdan değiştirilemez hale gelir.
-->Bu yöntemi kullanmak, değişkenin sadece başlangıçta atanıp daha sonra değiştirilmemesi gerektiği durumlarda faydalı olabilir. Örneğin, bir sınıf içindeki bir değişkenin değerinin sadece sınıfın içinde kontrol edilerek değiştirilmesini istiyorsak, bu yöntemi kullanabiliriz.

Örnek Senaryo:
class User {
    private var _name: String = ""

    var name: String
        get() = _name
        private set(value) {
            _name = value
        }

    init {
        // Başlangıçta sadece atanabilir
        name = "John"
        println("User name set to: $name")
        
        // Dışarıdan değiştirilemez
        // name = "Doe" // Hata!
    }

    fun changeName(newName: String) {
        // Dışarıdan değiştirilemez
        // _name = newName // Hata!
        
        name = newName
        println("User name changed to: $name")
    }
}

fun main() {
    val user = User()
    user.changeName("Alice")
}

-->Bu örnekte, name değişkeni başlangıçta sadece sınıf içinde atanabilir ve dışarıdan değiştirilemez. changeName fonksiyonu ile name değişkeninin değeri sınıf içinde değiştirilebilir, ancak dışarıdan doğrudan _name değişkenine erişim mümkün değildir. Bu sayede, name değişkeni val gibi davranmış olur.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3-"Değişmez" (Immutable) ve "Salt Okunur" (ReadOnly) kavramlarını açıklayın. val değişkenler neden aslında "değişmez" değil de "salt okunur" olarak açıklanmalıdır? Sorusunun Cevabı:

-->1.Sorunun cevabında bu kavramları açıklamıştık,tekrardan gözden geçirelim:
-->Read-only: Bir nesnenin durumunun değiştirilemez olduğu, yalnızca okunabilir olduğu anlamına gelir. Bu durumda, nesnenin içeriği değiştirilemez, ancak nesne referansı değiştirilebilir olabilir. Örneğin, bir liste "read-only" olabilir, yani listenin içeriği değiştirilemez, ancak listenin kendisi başka bir listeyle değiştirilebilir.
-->Immutable: Bir nesnenin durumunun hem içeriği hem de referansı değiştirilemez olduğu anlamına gelir. Yalnızca okunabilir ve değiştirilemez bir nesne olduğu söylenebilir. Örneğin, bir "immutable" liste, hem listenin içeriği hem de referansı değiştirilemez.

-->Val değişkenlerinin neden "değişmez" yerine "salt okunur" olarak açıklanması gerektiğini anlamak için, Kotlin'in dil tasarımı ve kullanım amacını anlamak önemlidir.

-->Kotlin'de val değişkenleri bir kez değer atandıktan sonra yeniden atanamaz, yani değiştirilemezler. Ancak, bu değişkenin içindeki verinin kendisi değişebilir. Örneğin, bir val değişkeni olan bir liste, liste elemanlarını değiştirebilir, ancak liste başka bir liste ile değiştirilemez.

-->Bu nedenle, "değişmez" kelimesi val değişkenlerini açıklamak için tam olarak doğru değildir, çünkü değişkenlerin içindeki veri değişebilir. "Salt okunur" terimi daha doğru bir açıklama sağlar, çünkü val değişkenleri sadece bir kez atanabilir ve değerleri okunabilir, ancak yeniden atanamazlar. Bu, değişkenin kendisinin değişmez olduğu anlamına gelmez, sadece içindeki verinin değişmez olduğu anlamına gelir.

-->Özetle, val değişkenlerinin "salt okunur" olarak açıklanması, değişkenin kendisinin değişmez olduğu yanılgısını önler ve değişkenin sadece bir kez atanabileceği ve değerlerinin okunabileceği gerçeğini vurgular. Bu, Kotlin'in dil tasarımı ve kullanım paradigmasıyla daha uyumludur.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4-"Tip Çıkarımı" (Type inference) kavramını açıklayın. Hangi durumlarda tip belirtmek kesin olarak gereklidir? sorusunun cevabı nedir:

-->"Tip Çıkarımı" (type inference), değişkenin veya ifadenin tipini derleyicinin otomatik olarak belirlemesini ifade eder. Bu, genellikle değişkenin tipini açıkça belirtmek zorunda kalmadan daha kısa ve daha okunabilir kod yazmanızı sağlar.

--> val number = 42 Burada, number değişkeninin tipi belirtilmemiştir, ancak Kotlin derleyicisi bu değişkenin bir Int olduğunu anlar.

Tip belirtmenin kesin olarak gerektiği durumlar şunlardır:
-->Karşılaştırma Operatörleri: ==, !=, ===, !== gibi operatörlerde tip uyumluluğu kontrol edilirken tip belirtilmesi gerekebilir.
-->Null Değerleri: Kotlin'de null değerleriyle çalışırken bazen tip belirtmek gerekebilir, özellikle null değerlerle ilgili hataların önlenmesi için.
-->Genel Tipler: Bazı durumlarda, genel bir tip yerine belirli bir tip kullanmak isterseniz tip belirtmeniz gerekebilir.
-->İşlem Sonuçları: Karmaşık ifadeler veya işlemler sonucunda elde edilen değerlerin tipini belirlemek için tip belirtmek gerekebilir.
-->Fonksiyonlar ve Dönüş Tipleri: Fonksiyonların dönüş tiplerini belirlemek için tip belirtmek gerekebilir.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

5-"Tip Güvenliği" (Type Safety) kavramını açıklayın. Sorusunun Cevabı nedir:

-->Type Safety, bir programlama dilinde, değişkenlerin ve ifadelerin veri tiplerine uygun olarak kullanılmasını ve tip uyumsuzluklarının önlenmesini sağlayan bir özelliktir.

--> // Tip uyumsuzluğu
val text: String = "Hello"
val number: Int = text // Hata! String bir değişkeni Int'e atamak mümkün değil

// Tip uyumlu
val number: Int = 42

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


6-Bir değişkeni nullable yapmak için ne yapmalıyız?

-->Bir değişkeni nullable yapmak için değişkenin tipinin sonuna ? işareti eklenir. Bu sayede değişken null değerini alabilir hale gelir. Örneğin, bir String değişkeni nullable yapmak için şu şekilde yapabiliriz:

--> val nullableString: String? = null

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


