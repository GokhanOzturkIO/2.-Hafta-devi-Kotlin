Temel Türler & Null Güvenliği

1.val ile var arasındaki fark nedir?
-Val = Değişken ataması yapıldıktan sonra değeri bir daha değişmez.Value kelimesinin kısaltımından gelir. Immutable değildir read only dir. Çünkü return ile dönen değerler değişsebilir. Değiştiğine dair bir örnek:
   fun calculate(){
        val a = A()
        a.age2 = 10
        a.age3 = 5
        println(a.age4)

        a.age2 = 12
        a.age3 = 4
        println(a.age4)

    }
-Var = Atama yaptıktan sonra değeri değiştirebiliriz.

2.Bir var değişkeni val gibi davranmasını nasıl sağlayabiliriz val kelimesini kullanmadan? Bunu neden yapmak isteriz? Örnek bir senaryo verin.

-var değişkenin set ini private yaparak val gibi davranmasını sağlayabiliriz. Örnek bir senaryo düşünelim: Bir sınıf içinde bir özellik (property) bulunmakta ve bu özelliğin değeri sadece başlangıçta belirlenebilsin, sonrasında değiştirilemesin istiyoruz. Ancak, bu özelliği val ile tanımlamamız mümkün değil, çünkü başlangıç değeri sonradan değiştirilemez.

3."Değişmez" (Immutable) ve "Salt Okunur" (ReadOnly) kavramlarını açıklayın. val değişkenler neden aslında "değişmez" değil de "salt okunur" olarak açıklanmalıdır?

-Değişmez (Immutable): Değişmez, bir nesnenin oluşturulduktan sonra, içindeki durumunun değiştirilemez olduğu durumu ifade eder. Yani, bir kez oluşturulan bir değişmez nesnenin değerleri daha sonra değiştirilemez. 
-Salt Okunur (ReadOnly): Salt okunur, bir nesnenin sadece okunabilir olduğu, yani değerlerinin okunabildiği ancak değiştirilemediği durumu ifade eder. Bu durum, bir nesnenin durumunun başlangıçta belirlendikten sonra daha sonra değiştirilemeyeceği, ancak bu nesnenin diğer nesnelerle etkileşimde bulunabileceği anlamına gelir.
-çünkü val değişkenleri fonksiyonlar üzerinden değerini değiştirebiliriz.

4."Tip Çıkarımı" (Type inference) kavramını açıklayın. Hangi durumlarda tip belirtmek kesin olarak gereklidir?

-type inference = değişken tipini idenin kendi anlaması. Eğer değişkenin değerini null yapıyorsak yani değişkeni nullable yapıyorsak değişkenin tipini belirtmemiz gerekiyor.

5.Kotlin'de tüm değişkenlerin sınıf olarak bulunması, "ilkel tip" (primitive type) olmadıkları anlamına gelir mi? Arka planda neler oluyor?

-Hayır. Özel optimazyonlar ile bytecode çevrilirken primiteve olacak şekilde çevriliyorlar.

6. "Tip Güvenliği" (Type Safety) kavramını açıklayın.

-Değişkenlerin hatalarını derleme zamanında gösterir.

7.Bir değişkeni nullable yapmak için ne yapmalıyız?

-Değişken tipinin yanına ? koyarız.

8."Null Güvenliği" (Null Safety) kavramını açıklayın.


- ?. Bu operatör, bir değişkenin null olup olmadığını kontrol eder. Eğer null ise, ifade null olarak değerlendirilir ve null hata almazsınız.
- !!. Bu operatör ile ideye değişkenin null olmayacağının garantisini veriyoruz. Eğer değişken null gelirse program hata verir. Dikkatli kullanılmalıdır. Kritik işlerde kullanılır genellikle.


9.Bir değişkene null değer atanır ve tip belirtilmezse Kotlin bu değişkeni nasıl yorumlar?

-nothing? tipinde yorumlar.

10.İlkel bir değişkenin nullable olması ile null değer alamaması arasında bellek yönetimi açısından nasıl farklar vardır?

-Bir değişken nullable ise değişken class halidir.

11.Nullable bir değişkenin bir değere sahip olması ile null olması arasında bellek yönetimi açısından nasıl bir fark vardır? Null değer almış bir değişken bellekte yer kaplamaz diyebilir miyiz?

-Daha sonra cevaplanacak

12.Nullable bir değişkenle çalışırken hangi operatörleri kullanırız? Bu operatörlerin kullanım farkları nelerdir? Hangisini ne zaman kullanmak daha anlamlıdır?

- ?. Bu operatör, bir değişkenin null olup olmadığını kontrol eder. Eğer null ise, ifade null olarak değerlendirilir ve null hata almazsınız.
- !!. Bu operatör ile ideye değişkenin null olmayacağının garantisini veriyoruz. Eğer değişken null gelirse program hata verir. Dikkatli kullanılmalıdır. Kritik işlerde kullanılır genellikle.



Sayılar

1.Kaç farklı tipte "number" sınıfı miras alan "alt sınıf" (child class) vardır? Bunların değer aralıkları neden önemlidir?

-Byte,Double,float,int,long,short miras alan alt sınıflar.
-Değer aralıklarına dikkat ederek değişkenler kullanmalıyız.

2.Eğer bir değişkene tip belirtimi yapılmaz ve bir değer atanırsa, Kotlin tip çıkarımını nasıl yapar?

-Eğer değer int aralığında ise lotlin int olarak verir. Aralıktan büyük ise long verir.

3.Float değişken oluştururken F ve f harfleri varken, Long değişken oluştururken neden küçük l harfi yoktur?

-Çünkü bazı fontlarda küçük l harfi 1 e benziyor.


4.Tek duyarlıklı (Single precision) ve Çift duyarlıklı (Double precision) kavramlarını açıklayın.

- Tek Duyarlılık (Single Precision): Tek duyarlılık, 32 bitlik bir formattır ve Float veri türü ile temsil edilir. Bu türdeki sayılar, ondalık sayıları ve kesirli sayıları temsil etmek için kullanılır.Tek duyarlılık, daha düşük bellek kullanımına sahiptir ancak daha az kesin sayılarla temsil edilebilir.
-Çift Duyarlılık (Double Precision): Çift duyarlılık, 64 bitlik bir formattır ve Double veri türü ile temsil edilir. Bu türdeki sayılar, daha büyük bir aralıkta ve daha yüksek hassasiyetle ondalık ve kesirli sayıları temsil etmek için kullanılır.Çift duyarlılık, daha fazla bellek kullanır ancak daha yüksek hassasiyet sunar. Kotlin'de varsayılan olarak ondalık sayılar, çift duyarlılık (Double) olarak kabul edilir.

5.Double ve Float değişkenlerle çalışırken ondalık ayıracı olarak hangi işaretler kullanılır? Bu ayıraçların kullanımında nelere dikkat etmek gerekir?

- (.) kullanılır. Ama apiden gelen ondalıklı sayılarda dikkat etmeliyiz.

6.Double ve Float değişkenler ondalık kısımda kaç basamağa kadar işlem yaparlar? Bu sınırın üzerinde gelen ondalık bilgileri için nasıl davranırlar? Hangi durumlar için Float ve hangi durumlar için Double kullanılmalıdır?

-Double: Double veri tipi, 64-bitlik bir formattır ve ondalık kısmı yaklaşık olarak 15-17 basamağa kadar doğru bir şekilde temsil edebilir.
-Float: Float veri tipi, 32-bitlik bir formattır ve ondalık kısmı yaklaşık olarak 6-9 basamağa kadar doğru bir şekilde temsil edebilir.

-Float: Bellek kullanımı ve performans konusunda daha verimli olabilir. Eğer bellek sınırlı ise veya performans çok kritik bir konu ise Float tercih edilebilir.
-Double: Daha büyük bir aralıkta ve daha yüksek hassasiyetle çalışma ihtiyacı varsa Double kullanılabilir. Çoğu durumda, genel amaçlı sayısal hesaplamalarda veya standart kullanımlarda Double tercih edilir.


7.Ondalık(Decimal), Onaltılık (Hexadecimal) ve İkilik (Binary) değişkenleri Kotlin'de nasıl tanımlayabilirsiniz?

-Decimal = val decimalNumber: Int = 42
-Hexadecimal = val hexadecimalNumber: Int = 0xAB
-Binary = val binaryNumber: Int = 0b101010


8. Sekizlik (Octal) değişkenler Java'da nasıl tanımlanır? Kotlin'de Sekizlik değişken tanımlanabilir mi?

-javada octal = int octalNumber = 075;
-Kotlinde direkt tanımlama yapamıyoruz. Ama onluk veya ikilik sistemden dönüşüm yapabiliriz. val octalNumber: Int = Integer.parseInt("75", 8) // 75 sekizlik (octal) sayıdır


9."Geleneksel Notasyon" (Conventional Notation) gösterimi nasıl yapılır?

-Daha sonra cevaplanacak


10.Sayısal değişkenlerde alt çizgi (underscore) nasıl kullanılır? Kotlin bunu nasıl yorumlar?

-Alt çizgi büyük sayılarda bizim daha rahat okuyabilmemiş için kullanılır. Kotlin alt çizgiyi görmezden gelir.


 



