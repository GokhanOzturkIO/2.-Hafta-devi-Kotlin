	BASİC TYPES AND NULL SAFETY

Soru 1 - val ile var arasındaki fark nedir?
	-> var kelimesi 'Variable' kelimesinin kısaltmasıdır ve değeri sonradan değiştirilebilir olan değişkenler üzerinde kullanılır.
	   val ise 'Value' kelimesinin kısaltmasıdır ve değeri sonradan değiştirilemez olan değişkenler üzerinde kullanılır(read-only).

Soru 2 - Bir var değişkeni val gibi davranmasını nasıl sağlayabiliriz val kelimesini kullanmadan? Bunu neden yapmak isteriz? Örnek bir senaryo verin.
	-> Bir var değişkeninin set fonksiyonunu private yaparak val gibi davranmasını sağlayabiliriz. Bu yöntemle val kelimesini kullanmamıza gerek kalmaz.
	   Bunu neden yapmak istediğimize gelirsek de tanımladığımız var değişkenini sadece tanımlanan class içerisinde değiştirmek isteyebiliriz. Yani set 
	   fonksiyonunu private yaptığımız bir değişkeni değişkenin tanımlandığı class içerisinde var olarak kullanabiliriz ancak class dışına çıktığımızda
      	   ise bu değişken val(read-only) gibi davranır.
	
	class User() {
		var name = "Salih"
			private set

	fun functionUser(){
		name = "Salihhhh" // hata vermez, değer fonksiyon içerisinde değiştirilir.
}		
}
	class anotherUser(){
		val user = User()
		
		user.name = "Salih Akbas" // değişmemize izin vermez
}

Soru 3 - "Değişmez" (Immutable) ve "Salt Okunur" (ReadOnly) kavramlarını açıklayın. val değişkenler neden aslında "değişmez" değil de "salt okunur" olarak açıklanmalıdır?
	-> Immutable - bir değişkenin ya da nesnenin durumunun asla atandığı ilk değerden farklı olamayacağı anlamına gelir.
	   Read-only - ilk değer atamasından sonra tekrar değer atanamayacağı anlamına gelir.
	Bu şekilde ifadelere baktığımızda ikisi de aynı anlama geliyor gibi gözükebilir. Val değişkenlerin neden read-only olduğunu öğrendiğimizde aralarındaki farkı
	daha iyi anlayabiliriz. Val değişkenlerin get metoduna farklı var değişkenlerin etkileyeceği bir matematiksel işlem yazarak val değişkeninin değerini değiştirebiliriz.
	Class A() {
	var b = 1
	var c = 2
	var d = 3
	
	val e : Int
		get() {
			return(b * c + d) // e'nin değeri 5
}
}
	fun changeVal() {
		val a = A()
		a.b = 2
		a.c = 3
		a.d = 4
		println(a.e) // Konsola yazdırılacak değer 10 -> Bu şekilde val olarak atadığımız değişkenin değeri değişmiş oldu. Bu sebeple val değişkenlere read-only denilmesi daha doğrudur.
}

Soru 4 - "Tip Çıkarımı" (Type inference) kavramını açıklayın. Hangi durumlarda tip belirtmek kesin olarak gereklidir?
	-> Tip çıkarımı bir programlama dilinde değişken türlerinin derleyici program tarafından otomatik olarak belirlenmesidir. Tip çıkarımı kullanılan bir derleyici içerisinde tanımladığımız değişkenin
	tipini belirttiğimizde derleyici tarafından bu tipi belirtmene gerek yok uyarısı da alırız(kodun çalışmasına engel olmaz). Ancak yeni bir değişken oluşturduk ve bunun değer atamasını yapmadık diyelim, 
	o zaman oluşturduğumuz değişkenin tipini belirtmek zorunda kalırız. 

Soru 5 - Kotlin'de tüm değişkenlerin sınıf olarak bulunması, "ilkel tip" (primitive type) olmadıkları anlamına gelir mi? Arka planda neler oluyor?
 	-> Kotlin'de tüm değişkenlerin sınıf olarak bulunması ilkel tip olmadıkları anlamına gelmez. Biz kotlinde bir değişken oluşturduğumuzda o değişken class olarak 
	görünür ancak 'Show Kotlin Bytecode' kullanarak arka planda bunların aslında Java dilindeki ilkel tiplere denk geldiğini görebiliriz. 

Soru 6 - "Tip Güvenliği" (Type Safety) kavramını açıklayın.
	-> Type Safety bir programlama dilinde oluşturduğumuz değişkenlerin tipinin yanlış belirtilmesini engelleyen bir özelliktir.

Soru 7 - Bir değişkeni nullable yapmak için ne yapmalıyız?
	Bir değişikeni nullable yapmak için değişken tipinin sonuna ? işareti koymamız gerekir. 

Soru 8 - "Null Güvenliği" (Null Safety) kavramını açıklayın.
	-> Null Safety null hatalarını en aza indirmek veya tamamen yok etmek amaçlı kullanılan bir özelliktir. Kotlin dilinde bir değişkeinin null olabileceğini belirtebiliriz ve daha sonrasında bu değişken kullanılırken
	null kontrolü yaparız ve NullPointerException hatasından kaçınmış oluruz.
Soru 9 - Bir değişkene null değer atanır ve tip belirtilmezse Kotlin bu değişkeni nasıl yorumlar?
	-> Eğer bir değişkene tip belirtmez ve null değer ataması yaparsak Kotlin bu değişkeni Nothing? türünde belirler.

Soru 10 - İlkel bir değişkenin nullable olması ile null değer alamaması arasında bellek yönetimi açısından nasıl farklar vardır?
	-> Nullable değişkenlerin taşıdıkları değerlerin bellek adreslerine ek olarak bir de null değerini temsil etmek için ayrı bir bellek adresi oluşturulur. Bu durum her nullable değişken için ayrı bellek kullanımına
	yol açar. Null değer alamayan değişkenlerde ise bu ekstra bellek alanına gerek duyulmaz.
Soru 11 - Nullable bir değişkenin bir değere sahip olması ile null olması arasında bellek yönetimi açısından nasıl bir fark vardır? Null değer almış bir değişken bellekte yer kaplamaz diyebilir miyiz?
	-> Referans tipli değişkenler ve onların değerleri bellekte iki farklı yapı olarak tutulurlar. Bu yapılardan birisi olan Stack'de referanslar yani değişkenler tutulur. Bir diğer yapı olan Heap'da ise
	bu değişkenlerin verileri tutulur. Dolayısıyla null değer almış bir değişken Heap üzerinde yer kaplamasa bile Stack üzerinde bir miktar yer kaplamış olur.
Soru 12 - Nullable bir değişkenle çalışırken hangi operatörleri kullanırız? Bu operatörlerin kullanım farkları nelerdir? Hangisini ne zaman kullanmak daha anlamlıdır?
	-> Nullable bir değişkenle çalışırken ?. ve !!. operatörlerini kullanırız. ?. operatörünü kullanırken derleyici programımıza operatörü kullandığımız değişken null gelirse bu işlemi atla ve devam et demiş oluruz.
	Ancak !!. operatörünü kullanırsak operatörü kullandığımız değişkenin null gelmesi durumunda NullPointerException hatasıyla karşılaşırız ve uygulamamız çöker. Eğer çok kritik bir işlem yapmıyorsak yani
	değişkenin null gelmesi durumunda uygulama üzerinde göz ardı edilebilecek bir hata olacaksa ?. kullanabiliriz. Ancak kritik bir işlem yapılıyorsa ve uygulama üzerinde önemli bir etki yaratacaksa !!. operatörünü
	kullanıp uygulamanın çökmesini sağlamamız gerekir.


	NUMBERS

Soru 1 - Kaç farklı tipte "number" sınıfı miras alan "alt sınıf" (child class) vardır? Bunların değer aralıkları neden önemlidir?
	-> Byte,Short,Int,Long,Double,Float olmak üzere 6 adet alt sınıf bulunmaktadır. Bellekte kapladıklar yer bakımından mümkün olduğunca aralıklarına göre kullanmak önemlidir.
Soru 2- Eğer bir değişkene tip belirtimi yapılmaz ve bir değer atanırsa, Kotlin tip çıkarımını nasıl yapar?
	-> Tip çıkarımı sırasında eğer atadığımız değer Int ifadeden daha büyük değilse default olarak Int tipinde belirtilir. Eğer Int ifadeden daha büyük bir değerse default olarak Long tipinde belirtilir.
Soru 3 - Float değişken oluştururken F ve f harfleri varken, Long değişken oluştururken neden küçük l harfi yoktur?
	-> küçük l harfi kullanılan derleyici programlarda 1 rakamına çok benzediği için kullanılmaz.
Soru 4 - Tek duyarlıklı (Single precision) ve Çift duyarlıklı (Double precision) kavramlarını açıklayın.
	-> Tek duyarlılıklı genellikle 32 bitlik bir veri türünü ifade eder. Tek duyarlılıklı format, daha düşük bellek kullanımı ve daha hızlı işleme sağlar. Çift duyarlılıklı ise genellikle 64 bitlik bir veri türünü
	ifade eder. Çift duyarlılıklı format da ise daha fazla bellek kullanımı ve daha yavaş işleme gerçekleşir.
Soru 5 - Double ve Float değişkenlerle çalışırken ondalık ayıracı olarak hangi işaretler kullanılır? Bu ayıraçların kullanımında nelere dikkat etmek gerekir?
	-> Double ve Float değişkenlerle çalışırken ondalık ayıracı olarak genellikle . ve , işaretleri kullanılır. Bize gelen verinin hangi işaret ile kullanıldığını önceden kontrol etmemiz gerekir. Eğer bu kontrolü 
	yapmazsak kod çalıştığı sırada kendi kodumuzda kullandığımız işaret dışında bir işaret gelirse uygulamamızın çökmesi gibi sorunlarla karşılaşırız.
Soru 6 - Double ve Float değişkenler ondalık kısımda kaç basamağa kadar işlem yaparlar? Bu sınırın üzerinde gelen ondalık bilgileri için nasıl davranırlar? Hangi durumlar için Float ve hangi durumlar için Double kullanılmalıdır?
	-> Float değişkenler yaklaşık olarak 7 basamağa, Double değişkenler ise yaklaşık olarak 16 basamağa kadar işlem yapabilirler. Eğer bu sınırların üzerinde bir ondalık verisi gelirse kesme(rounding) işlemi gerçekleşir.
	Yani sayı otomatik olarak en yakın değere yuvarlanır. Bellek kullanımı ve işlemci performansının önemli olduğu durumlarda Float kullanmalıyız, ancak bu maddeler bizim için önemli değilse Double kullanabiliriz.  