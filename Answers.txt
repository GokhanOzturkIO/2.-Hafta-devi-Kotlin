	BASİC TYPES AND NULL SAFETY

Soru 1 - val ile var arasındaki fark nedir?
	-> var kelimesi 'Variable' kelimesinin kısaltmasıdır ve değeri sonradan değiştirilebilir olan değişkenler üzerinde kullanılır.
	   val ise 'Value' kelimesinin kısaltmasıdır ve değeri sonradan değiştirilemez olan değişkenler üzerinde kullanılır(read-only).

Soru 2 - Bir var değişkeni val gibi davranmasını nasıl sağlayabiliriz val kelimesini kullanmadan? Bunu neden yapmak isteriz? Örnek bir senaryo verin.
	-> Bir var değişkeninin set fonksiyonunu private yaparak val gibi davranmasını sağlayabiliriz. Bu yöntemle val kelimesini kullanmamıza gerek kalmaz.
	   Bunu neden yapmak istediğimize gelirsek de tanımladığımız var değişkenini sadece tanımlanan class içerisinde değiştirmek isteyebiliriz. Yani set 
	   fonksiyonunu private yaptığımız bir değişkeni değişkenin tanımlandığı class içerisinde var olarak kullanabiliriz ancak class dışına çıktığımızda
      	   ise bu değişken val(read-only) gibi davranır.
	
	class User() {
		var name = "Salih"
			private set

	fun functionUser(){
		name = "Salihhhh" // hata vermez, değer fonksiyon içerisinde değiştirilir.
}		
}
	class anotherUser(){
		val user = User()
		
		user.name = "Salih Akbas" // değişmemize izin vermez
}

Soru 3 - "Değişmez" (Immutable) ve "Salt Okunur" (ReadOnly) kavramlarını açıklayın. val değişkenler neden aslında "değişmez" değil de "salt okunur" olarak açıklanmalıdır?
	-> Immutable - bir değişkenin ya da nesnenin durumunun asla atandığı ilk değerden farklı olamayacağı anlamına gelir.
	   Read-only - ilk değer atamasından sonra tekrar değer atanamayacağı anlamına gelir.
	Bu şekilde ifadelere baktığımızda ikisi de aynı anlama geliyor gibi gözükebilir. Val değişkenlerin neden read-only olduğunu öğrendiğimizde aralarındaki farkı
	daha iyi anlayabiliriz. Val değişkenlerin get metoduna farklı var değişkenlerin etkileyeceği bir matematiksel işlem yazarak val değişkeninin değerini değiştirebiliriz.
	Class A() {
	var b = 1
	var c = 2
	var d = 3
	
	val e : Int
		get() {
			return(b * c + d) // e'nin değeri 5
}
}
	fun changeVal() {
		val a = A()
		a.b = 2
		a.c = 3
		a.d = 4
		println(a.e) // Konsola yazdırılacak değer 10 -> Bu şekilde val olarak atadığımız değişkenin değeri değişmiş oldu. Bu sebeple val değişkenlere read-only denilmesi daha doğrudur.
}

Soru 4 - "Tip Çıkarımı" (Type inference) kavramını açıklayın. Hangi durumlarda tip belirtmek kesin olarak gereklidir?
	-> Tip çıkarımı bir programlama dilinde değişken türlerinin derleyici program tarafından otomatik olarak belirlenmesidir. Tip çıkarımı kullanılan bir derleyici içerisinde tanımladığımız değişkenin
	tipini belirttiğimizde derleyici tarafından bu tipi belirtmene gerek yok uyarısı da alırız(kodun çalışmasına engel olmaz). Ancak yeni bir değişken oluşturduk ve bunun değer atamasını yapmadık diyelim, 
	o zaman oluşturduğumuz değişkenin tipini belirtmek zorunda kalırız. 

Soru 5 - Kotlin'de tüm değişkenlerin sınıf olarak bulunması, "ilkel tip" (primitive type) olmadıkları anlamına gelir mi? Arka planda neler oluyor?
 	-> Kotlin'de tüm değişkenlerin sınıf olarak bulunması ilkel tip olmadıkları anlamına gelmez. Biz kotlinde bir değişken oluşturduğumuzda o değişken class olarak 
	görünür ancak 'Show Kotlin Bytecode' kullanarak arka planda bunların aslında Java dilindeki ilkel tiplere denk geldiğini görebiliriz. 

Soru 6 - "Tip Güvenliği" (Type Safety) kavramını açıklayın.
	-> Type Safety bir programlama dilinde oluşturduğumuz değişkenlerin tipinin yanlış belirtilmesini engelleyen bir özelliktir.