1. Temel Türler & Null Güvenliği

1.1 val ile var arasındaki fark nedir?

- val'a bir kez değer atanır, yeniden atanamaz. var'a sonradan değer atanabilir.
- val read-only, var mutable değişkendir.
- Değişken oluştururken önce val ile oluşturup sonra gerekirse var'a çevirmek best practise olarak kabul edilebilir.

1.2 Bir var değişkeni val gibi davranmasını nasıl sağlayabiliriz val kelimesini kullanmadan? Bunu neden yapmak isteriz? Örnek bir senaryo verin.

- var değişkenin set'i private yapılırsa val gibi davranır.
- var değişkenin değeri Class'ın dışından değiştirilemesin ancak Class'ın içinden değiştirilebilsin isteniyorsa bu yöntem kullanılabilir.

1.3 "Değişmez" (Immutable) ve "Salt Okunur" (ReadOnly) kavramlarını açıklayın. val değişkenler neden aslında "değişmez" değil de "salt okunur" olarak açıklanmalıdır?

- Read-only: İlk değer atamasından sonra tekrar değer atanamaz.
- Immutable: Değişkenin/Nesnenin durumu asla ilk değerden farklı olamaz.
- val read-only'dir, immutable değil. Bunun açıklaması bir örnekle verilecek olursa, aşağıdaki kodda availableSpace'in değeri her seferinde farklı sonuç üretebilir:

val availableSpace: Int
	get() {
		return (width * height * length) - usedSpace
	}
