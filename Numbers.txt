1.Kaç farklı tipte "number" sınıfı miras alan "alt sınıf" (child class) vardır? Bunların değer aralıkları neden önemlidir?
    if you're looking for types that behave similarly to child classes inheriting from the Number class,
    you could consider the primitive data types Byte, Short, Int, Long, Float, and Double as types that can be treated as subclasses of Number.

2.Eğer bir değişkene tip belirtimi yapılmaz ve bir değer atanırsa, Kotlin tip çıkarımını nasıl yapar?
    This operation called Type Inference. If you declared a value to a variable without defining its type
    then the compiler will decide its type looking its use cases and initial value.

3.Float değişken oluştururken F ve f harfleri varken, Long değişken oluştururken neden küçük l harfi yoktur?
    sometimes l looks like 1 in such fonts and it confuses the people.

4.Tek duyarlıklı (Single precision) ve Çift duyarlıklı (Double precision) kavramlarını açıklayın.
    Double Precision: Double precision floating-point numbers, represented by the Double type in Kotlin.32 bit
    Single Precision: Single precision floating-point numbers, represented by the Float type in Kotlin. 64 bit

5.Double ve Float değişkenlerle çalışırken ondalık ayıracı olarak hangi işaretler kullanılır? Bu ayıraçların kullanımında nelere dikkat etmek gerekir?
    Dot Sign: Only period sign should be used for decimal numbers. A comma is not accepted as a decimal point.
    "3.24"
6.Double ve Float değişkenler ondalık kısımda kaç basamağa kadar işlem yaparlar? Bu sınırın üzerinde gelen ondalık bilgileri için nasıl davranırlar? Hangi durumlar için Float ve hangi durumlar için Double kullanılmalıdır?
    Float: Float provides 32-bit floating-point precision and typically offers precision up to seven decimal places.
    Double: Double provides 64-bit floating-point precision and usually offers precision up to 15-16 decimal places.
    Float and Double data types have specific precision limitations, any decimal information beyond these limits will be represented with rounding errors
    And float is faster than double but double is more useful in high precision and financial areas.

7.Ondalık(Decimal), Onaltılık (Hexadecimal) ve İkilik (Binary) değişkenleri Kotlin'de nasıl tanımlayabilirsiniz?
    val decimalNumber: Int = 42
    val hexadecimalNumber: Int = 0x2A
    val binaryNumber: Int = 0b101010

8.Sekizlik (Octal) değişkenler Java'da nasıl tanımlanır? Kotlin'de Sekizlik değişken tanımlanabilir mi?
    int octalNumber = 075; // in java we use 0 before defining number tells the compiler it is octal
    but in kotlin there is nothing to represent octal numbers

9."Geleneksel Notasyon" (Conventional Notation) gösterimi nasıl yapılır?
    val number = 123456789
    println("Number: $number") // Output: 123456789

10.Sayısal değişkenlerde alt çizgi (underscore) nasıl kullanılır? Kotlin bunu nasıl yorumlar?
    1_000_000_000
    In Kotlin, the underscore character (_) can be used in numeric literals to enhance readability by separating digits into groups.
    This is typically done to represent large numbers and make them easier to read, especially when dealing with thousands, millions, or billions.

11.== ile neyi karşılaştırırız? === ile neyi karşılaştırırız?
    with "==" you comparing their exact values.
    with "===" you comparng their referance values

12.=== operatörü ile karşılaştırma yaparken Byte değer aralığı neden önemlidir? Kotlin bu aralığa göre neden özel bir davranış sergiler?
     Kotlin caches Byte objects for values in the range of -128 to 127. This caching mechanism is implemented for performance optimization and memory efficiency.
     val byteValue1: Byte = 100
     val byteValue2: Byte = 100
     val byteValue3: Byte = 150
     val byteValue4: Byte = 150

     println("Comparing Byte values within the cached range:")
     println("byteValue1 === byteValue2: ${byteValue1 === byteValue2}") // true

     println("\nComparing Byte values outside the cached range:")
     println("byteValue3 === byteValue4: ${byteValue3 === byteValue4}") // false

13.Sayısal değişkenlerde hangi matematiksel operatörler kullanılabilir?
    (+,-,/,*,%(mod))
14.Sayısal değişkenlerde hangi karşılaştırma operatörleri kullanılabilir?
    a > b < c
    a >= a <=c
15.Bit düzeyinde operatörler (Bitwise operators) nelerdir? Ne amaçla kullanılır? Kotlin'de bunları nasıl kullanabilirsiniz?
    And - "&" ; OR - "|"
16.Kotlin'de büyük sayılarla çalışırken hangi ek türlerden yararlanılır ve bu türlerin sınırları nelerdir?
    BigInteger: The BigInteger class can represent integers of unlimited size theoretically.
    BigDecimal: The BigDecimal class has limitations on the precision of decimal numbers and the size of integers.
17.Double ve Float değişkenler kullanılırken "yuvarlama" davranışı nasıldır? Bu nasıl değiştirilebilir?
    val floatValue: Float = 3.14159f
    val doubleValue: Double = 3.14159

    val roundedFloat: Float = floatValue.roundToInt().toFloat()
    val roundedDouble: Double = doubleValue.roundToInt().toDouble()
