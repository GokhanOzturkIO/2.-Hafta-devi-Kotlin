Soru 1: `is` ve `!is` operatörlerinin kullanımını açıklayın.

is operatörü, bir nesnenin belirli bir türde olup olmadığını kontrol etmek için kullanılır.
Bu operatör, nesnenin belirtilen türde olup olmadığını kontrol eder ve sonuca göre bir boolean değeri döndürür.

!is operatörü, is operatörünün tersi olarak kullanılır.
Yani, bir nesnenin belirli bir türde olup olmadığını kontrol eder ve sonuca göre bir boolean değeri döndürür.

------------------------------------------------------------------------------------------------------------------------

Soru 2: "Akıllı Dönüşüm" (Smart Cast) ne demektir? Farklı kod örnekleri ile açıklayın.
Bu özelliğin sınırlamaları nelerdir?

    val value: Any = "Merhaba, Kotlin!"

    if (value is String) {
        println(value.length)
    }

    if (value !is Int) {
        println("Değişken bir Int türünde değildir.")
    }

 Kotlin dilinde bir değişkenin tipi üzerinde `compiler` tarafından otomatik olarak dönüşümün gerçekleştirilme
    işlemidir. Bu şekilde açık bir şekilde `Type Conversion` işlemini yapmadan o tipin sahip olduğu bütün özellikleri
    methodları kullanmamıza sağlar.

    Yine yukarıdaki örnekten devam edelim, `value` değişkeninin `String` olup olmadığını kontrol ettik ve
    `if` içerisinde açık bir şekilde `Type Conversion` işlemini yapmadan `String` tipine ait olan `length` özelliğini
    kullanabildim. İşte tam olarak bu duruma `Smart Cast(Akıllı Dönüşüm)` denir.

------------------------------------------------------------------------------------------------------------------------

Soru 3: Güvenli & Güvensiz" operatörler nelerdir?

    Bir nesneyi başka bir nesneye cast etmek istediğimizde iki operatör vardır. Bunlar as(unSafe) ve as?(safe)

    val x: String = y as String

    Bu işlemde eğer y String'e cast edilemezse programımız hata verip çökecektir.

    val x:String? = y as? String

    Burada ise eğer işlem gerçekleşmesse x değişkenine null değer atanır ve programda çökme meydana gelmez.

------------------------------------------------------------------------------------------------------------------------

Soru 4: Sayısal değişkenlerde örtük tip genişletme (implicit widening conversions) ne demektir? Kotlin'de bu neden yapılamaz?

      Sayısal değişkenlerde örtük tip genişletme, örneğin bir fonksiyon var ve bizden parametre
      olarak 'Long' bir değer istiyor. Bizim bu parametreye 'Int' bir değer verdiğimizde tür dönüşümü işlemi
      otomatik olarak yapılma işlemine denir.

      Kotlin'de sayısal türler arasında örtük tip genişletme bulunmaz. Bu, bilinçli bir tasarım tercihidir
      Kotlin'de bunun yapılamama sebebi, olası hataları önlemek içindir.

      Dönşüm yapmak için açık bir şekilde belirtmeliyiz.
      Örn. "toLong()", "toByte()" vs.

------------------------------------------------------------------------------------------------------------------------

Soru 5:  "`val b: Byte = 1` ile `val i: Int = b` ve son olarak `print(b == i)` gibi bir kod yazıldığında çıktı ne olur?
Neden böyle bir çıktı aldığınızı açıklayın.

Bu kodda yer alan problem Byte bir değer ile Int bir değerin karşılaştırılamıyor olduğudur eğer çalıştırmayı denersek:

Operator '==' cannot be applied to 'Byte' and 'Int'  şeklinde bir hata alırız.

Bu sorunu print(b.toInt() == i) şu şekilde çözebiliriz cevabımız true yani b'nin i değişkenine eşit olması durumudur.

------------------------------------------------------------------------------------------------------------------------

Soru 6: "val b: Byte = 1 ile val i: Int = b.toInt() ve son olarak print(b == i) gibi bir kod yazıldığında çıktı ne olur?
 Neden böyle bir çıktı aldığınızı açıklayın.

 Çıktımız true olur. Çünkü '==' operatörü ile değişkenlerin aldığı değerler karşılaştırılıyor ve örneğimize baktığımızda
 her ikiside 1 değerine sahip olduğu için sonuç true olur

------------------------------------------------------------------------------------------------------------------------

Soru 7: Sayısal değişkenlerde açık dönüşüm (Explicit Type Conversion) yaparken hangi fonksiyonları kullanabilirsiniz?

-toByte(): Bir sayısal değeri Byte tipine dönüştürür.

-toShort(): Bir sayısal değeri Short tipine dönüştürür.

-toInt(): Bir sayısal değeri Int tipine dönüştürür.

-toLong(): Bir sayısal değeri Long tipine dönüştürür.

-toFloat(): Bir sayısal değeri Float tipine dönüştürür.

-toDouble(): Bir sayısal değeri Double tipine dönüştürür.

-toChar(): Bir sayısal değeri Char tipine dönüştürür.